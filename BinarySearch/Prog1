package BinarySearch.TutorialPractice;public class Prog1 {
    /*

    1. Find he middle element in array.
    2. If target is < middle, search in right part of array else search in left part of the array.
    3. if middle element == target, middle element is the answer.

    Time complexity of Binary search is log base 2 of N

    mid = (start + end)/ 2, This logic will fail for very large numbers when start + end exceeds int range.
    Better way to find mid index is
    mid = start + (end - start)/2

     */
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int target = 99;
        System.out.println(binarySearch(arr, target));
    }

    private static int binarySearch(int[] arr, int target){
        if(arr.length == 0)
            return -1;

        int start = 0;
        int end = arr.length-1;
        while (start <= end){
            int mid = start + (end - start) / 2;
            if(arr[mid] > target) // If target is < middle, search in right part of array
                end = mid - 1;
            else if (arr[mid] < target) { // If target is > middle, search in left part of array
                start = mid + 1;
            }else return mid;
        }

        // if element not found returning -1
        return -1;
    }
}
